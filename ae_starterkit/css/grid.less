// http://unsemantic.com/
// https://gist.github.com/nicooprat/7200266

/* ==================================================================
 * Variables
 * ================================================================== */

@tablet-breakpoint: 520px;
@desktop-breakpoint: 780px;

@mobile: ~"(max-width: @{tablet-breakpoint})";
@tablet: ~"(min-width: @{tablet-breakpoint}) and (max-width: @{desktop-breakpoint})";
@desktop: ~"(min-width: @{desktop-breakpoint})";

// This is the widest that grid-container will go, after which it will remain at a "fixed" width.
@max-width: 1200px;

// This value controls how much padding each grid-x unit recieves on the left/right.
@gutter-half: 10px;


/* ==================================================================
 * Miscellaneous
 * ================================================================== */

// IE10 "Snap" Mode
@media screen and (max-width: 400px) {
  @-ms-viewport {
    width: @min-width;
  }
}


/* ==================================================================
 * Common
 * ================================================================== */

// All grid units are contained within a top level element, with the class name grid-container.
// This has a built in "clearfix" so it does not require a clearing element at the end.
// It also handles centering the grid layout within the page.

.grid-container:before, .clearfix:before,
.grid-container:after, .clearfix:after {
  content: "";
  display: table;
}

.grid-container:after, .clearfix:after {
  clear: both;
}

.grid-container, .clearfix {
  /* <IE7> */
  *zoom: 1;
  /* </IE7> */
}

.grid-container {
  margin-left: auto;
  margin-right: auto;
  max-width: @max-width;
  padding-left: @gutter-half;
  padding-right: @gutter-half;
}

// There are grid classes named [scope-]grid-x
// where "x" is a number that represents the percentage width of each grid unit
// and scope may be used to refer to mobile or tablet grid.
// The actual classes are created using mixins.

[class*="grid-"] {
  min-height: 1px;
  .boxSizing();
  padding-left: @gutter-half;
  padding-right: @gutter-half;
  /* <IE7> */
  *padding-left: 0;
  *padding-right: 0;
  /* </IE7> */

  > * {
    /* <IE7> */
    *margin-left: ~'expression((!this.className.match(/grid-[1-9]/) && this.currentStyle.display === "block" && this.currentStyle.width === "auto") && "@{@gutter-half}")';
    *margin-right: ~'expression((!this.className.match(/grid-[1-9]/) && this.currentStyle.display === "block" && this.currentStyle.width === "auto") && "@{@gutter-half}")';
    /* </IE7> */
  }
}

[class$="grid-100"] {
  float: left;
  width: 100%;
  clear: both;
  /* <IE7> */
  *zoom: 1;
  /* </IE7> */

  &:before,
  &:after {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}

// If you want to nest grid units inside others, you will need to use the class grid-parent on
// the element that will contain child grid units. This will zero out any side padding on the
// element itself, allowing the padding of the nested grid units to create a gutter.
// This can also be handy if you simply want to zero out padding for a particular grid unit,
// to allow its contents to be full width.

[class$="grid-parent"] {
  padding-left: 0;
  padding-right: 0;
}


/* ==================================================================
 * Mixins
 * ================================================================== */

// Grid classes are named grid-x where "x" is a number that represents the percentage width of each grid unit.

// Makes grid classes
// @width is the width of the element in %
.make-grid(@width) {
  float: left;
  width: (1% * @width);
  /* <IE7> */
  @num: (100 - @width)/100;
  *width: ~'expression(Math.floor(@{num} * (this.parentNode.offsetWidth - parseFloat(this.parentNode.currentStyle.paddingLeft) - parseFloat(this.parentNode.currentStyle.paddingRight))) + "px")';
  /* </IE7> */
}

// If you want to swap the visual arrangement of columns, but not affect source order,
// you can use push-x and pull-x classes

// Makes pull classes - elements are pulled to the left 
// @offset is the offset of the element in %
.make-pull(@offset) {
  position: relative;
  left: -(1% * @offset);
  /* <IE7> */
  @num: (100 - @offset)/100;
  *left: ~'expression(Math.floor(-@{num} * (this.parentNode.offsetWidth - parseFloat(this.parentNode.currentStyle.paddingLeft) - parseFloat(this.parentNode.currentStyle.paddingRight))) + "px")';
  /* </IE7> */
}

// Makes push classes - elements are pushed to the right 
// @offset is the offset of the element in %
.make-push(@offset) {
  position: relative;
  left: (1% * @offset);
  /* <IE7> */
  @num: (100 - @offset)/100;
  *left: ~'expression(Math.floor(@{num} * (this.parentNode.offsetWidth - parseFloat(this.parentNode.currentStyle.paddingLeft) - parseFloat(this.parentNode.currentStyle.paddingRight))) + "px")';
  /* </IE7> */
}

// If you just want to create some "dead space," the visual equivalent of an empty column,
// you can use the prefix-x and suffix-x classes.

// Makes prefix classes
// @offset is the dead space to the left in %
.make-prefix(@offset) {
  margin-left: (1% * @offset);
}

// Makes suffix classes
// @offset is the dead space to the right in %
.make-suffix(@offset) {
  margin-right: (1% * @offset);
}

.boxSizing( @str: border-box ) {
  box-sizing: @str;
  -ms-box-sizing: @str;
  -moz-box-sizing: @str;
  -webkit-box-sizing: @str;
  -o-box-sizing: @str;
}


/* ==================================================================
 * Loop
 * ================================================================== */

.loop (@index,@step) when (@index > 0) {

  // Current value
  @i: @index * @step;

  @media @desktop {
    .grid-@{i} { .make-grid(@i); }
    .pull-@{i} { .make-pull(@i); }
    .push-@{i} { .make-push(@i); }
    .prefix-@{i} { .make-prefix(@i); }
    .suffix-@{i} { .make-suffix(@i); }
  }

  @media @tablet {
    .tablet-grid-@{i} { .make-grid(@i); }
    .tablet-pull-@{i} { .make-pull(@i); }
    .tablet-push-@{i} { .make-push(@i); }
    .tablet-prefix-@{i} { .make-prefix(@i); }
    .tablet-suffix-@{i} { .make-suffix(@i); }
  }

  @media @mobile {
    .mobile-grid-@{i} { .make-grid(@i); }
    .mobile-pull-@{i} { .make-pull(@i); }
    .mobile-push-@{i} { .make-push(@i); }
    .mobile-prefix-@{i} { .make-prefix(@i); }
    .mobile-suffix-@{i} { .make-suffix(@i); }
  }

  // Recursive
  .loop (@index - 1,@step);
}

// 5% --> 95%
.loop (19,5);

// 33% & 66%
.loop (2,33);


/* ==================================================================
 * Width specific
 * ================================================================== */

@media @desktop {

  .hide-on-desktop {
    display: none;
  }
}

@media @tablet {

  .hide-on-tablet {
    display: none;
  }
}

@media @mobile {

  .hide-on-mobile {
    display: none;
  }
}
